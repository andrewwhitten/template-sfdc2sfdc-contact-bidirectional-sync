<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce Contact Bidirectional Synchronization</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to have my contacts synchronized between two different Salesforce organizations.

This template serves as a foundation for setting an online bidirectional sync of contacts between 
two Salesforce instances, and being able to specify filtering criteria. 

The  main behavior for the integration is polling for changes in new contacts or modified ones using the scheduler 
component. The polled changes are for those that have occurred in any of the Salesforce instances during a  
defined period of time. For those contacts that have not been updated yet, the integration triggers an 
upsert (update or create depending the case) taking the last modification as the one that should be applied.

Requirements have been set not only to be used as examples, but also to establish starting points 
to adapt the integration to any given requirements.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of 
them deal with the preparations in both, that must be made for all to run smoothly. Failing 
to do so can lead to unexpected behavior of the template.
]]>
		</section>
		<section id="run_it">
<![CDATA[
To have your application up and running:

1. Configure the application properties.
2. Run it on premises or in CloudHub (Runtime Manager).
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
To create your application on CloudHub, go to Anypoint Platform > Runtime Manager > Deployment > Advanced 
to set the environment variables listed in "Properties to Configure" as well as in the **mule.env** file.
]]>
		</section>
		<section id="default_running_on_standalone">
<![CDATA[
Fill in the properties in one of the property files, for example in 
mule.dev.properties, and run your app 
with the corresponding environment variable to use it. To follow the example, use the `mule.env=dev` value.
]]>
		</section>
		<section id="application_configuration">
<![CDATA[
#### Application Configuration

+ scheduler.frequency `10000`  
The milliseconds between two different checks for updates in either Salesforce instance.

+ scheduler.startDelay `0`

+ watermark.default.expression `2018-02-25T11:00:00.000Z`  
This property is important, as it configures the starting point of the synchronization. If the 
use case includes synchronization for every contact created from the beginning of the time, you should use a 
date previous to any contact creation, such as `1900-01-01T08:00:00.000Z`). 
If you want to synchronize the contacts created from now on, then use a default value according to 
that requirement, for example, if today is April 21, 2018 and eleven o'clock in London, 
use the `2018-04-21T11:00:00.000Z` value.

+ page.size `1000`

+ account.sync.policy `syncAccount`
**Note:** the property **account.sync.policy** can take any of the two following values: 
+ **empty_value**: If the property has no value assigned to it then application will do nothing in what respect to the account and it'll just move the contact over.
+ **syncAccount**: It tries to create the contact's account when it is not pressented in the Salesforce instance B.

#### SalesForce Connector Configuration for Company A

+ sfdc.a.username `aunt.eater@mail.com`
+ sfdc.a.password `G0ttaF1ndTh3m!!`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/42.0`
+ sfdc.a.integration.user.id `A0ed000BO9T`

**Note:** To find the correct *sfdc.a.integration.user.id* value, refer to the 
example project "Salesforce Data Retrieval" in Anypoint Exchange.

#### SalesForce Connector Configuration for Company B

+ sfdc.b.username `polly.hedra@example.com`
+ sfdc.b.password `WootWoot99!!`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/42.0`
+ sfdc.b.integration.user.id `B0ed000BO9T`

**Note:** To find the correct *sfdc.b.integration.user.id* value, refer to the example 
project "Salesforce Data Retrieval" in Anypoint Exchange.
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Not relevant for this use case.
]]> 
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
Use this file to contain each inbound and outbound endpoint for your integration app. 
In this template, this file contains a scheduler endpoint that queries Salesforce A and Salesforce B 
for updates using watermark.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template. Its main component is a Mule batch job, and 
it includes steps for both executing the synchronization from Salesforce A to Salesforce B, and the other way around.
]]>
		</section>
		<section id="default_error_handling_xml">
		<![CDATA[
Use this file for how your integration reacts depending on the different exceptions. This file 
holds an error handler that is referenced by the scheduler flow in the endpoints XML file.
]]>
		</section>
	</sections>
</configuration>
